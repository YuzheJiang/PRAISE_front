{"remainingRequest":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/babel-loader/lib/index.js!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/mappyview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/mappyview.vue","mtime":1596604873675},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/babel-loader/lib/index.js","mtime":1594193189891},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js","mtime":1594193201324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["mappyview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row\">\n      <div class=\"col-12\">\n         <div class=\"row\">\n           <div class=\"col-md-3 first_map\">\n            <h6 id=\"Future_hour\">Future hour:</h6>\n          </div>\n          <div class=\"col-md-5 first_map\">\n            <h4 id='heading_1'>CMAQ Result</h4>\n          </div>\n          <div class=\"col-md-4 first_map\">\n            <p id=\"legend_name\">PM10</p>\n            <div class = 'legend' id='legend'></div>\n          </div>\n        </div>\n        <div class='map' id='map_1'></div>\n      </div>\n      <hr>\n      <div class=\"col-12\">\n         <h4 id='heading_2'>Our Method Result</h4>\n         <div class='map' id='map_2'></div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport EventBus from '@/eventBus';\n\nexport default {\n  name: 'mappyview',\n  data() {\n    return {\n      colorData: [{ offset: '0%', color: '#ffffff' }, { offset: '18.28%', color: '#edf8fb' },\n        { offset: '28.56%', color: '#ccece6' }, { offset: '42.84%', color: '#99d8c9' },\n        { offset: '57.12%', color: '#66c2a4' }, { offset: '71.4%', color: '#2ca25f' },\n        { offset: '100%', color: '#006d2c' }],\n      extent: [0, 80],\n      array: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n      index: 12,\n      obStation: null,\n      map1: null,\n      map2: null,\n      flag: false,\n      polygon_data_1: [],\n      polygon_data_2: [],\n      geodata: null,\n    };\n  },\n  methods: {\n    initMap() {\n      this.map1 = L.map('map_1').setView([22.34385, 114.1289], 10);\n      this.map2 = L.map('map_2').setView([22.34385, 114.1289], 10);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map1);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map2);\n    },\n    drawGrids(data, hr) {\n      const colors = d3.scaleQuantize()\n        .domain(this.extent)\n        .range(this.colorData.map((d) => d.color));\n      const method = ['CMAQ_data', 'Our_method_data'];\n      this.geodata = data;\n      method.forEach((element) => {\n        const name = element;\n        this.clearLayer(name);\n        let polygon;\n        const newData = data.filter(({ Name }) => [name].includes(Name));\n        newData.forEach((l) => {\n          const layer = l[hr];\n          const val = layer.pollutant.toFixed(2);\n          const obsVal = layer.Obs_con;\n          if (layer.data === 'Observatory_data') {\n            polygon = L.polygon(layer.coord, {\n              fillColor: 'red', weight: 0, opacity: 0, fillOpacity: 0.6,\n            }).bindTooltip(`${name}: ${val.toString()}\\n Obs: ${obsVal.toString()}`);\n          } else {\n            polygon = L.polygon(layer.coord, {\n              fillColor: colors(layer.pollutant), weight: 0, opacity: 0, fillOpacity: 0.4,\n            }).bindTooltip(`${name}: ${val.toString()}`);\n          }\n          if (name === 'CMAQ_data') {\n            polygon.addTo(this.map1);\n            this.polygon_data_1.push(polygon);\n          } else {\n            polygon.addTo(this.map2);\n            this.polygon_data_2.push(polygon);\n          }\n        });\n      });\n    },\n    drawLegend(divID) {\n      const xScale = d3.scaleLinear()\n        .range([0, 180 - (9 * 2)])\n        .domain(this.extent);\n      const xAxis = d3.axisBottom(xScale)\n        .tickSize(8 * 2)\n        .tickValues(this.extent);\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 180)\n        .attr('height', 35);\n      const g = svg.append('g').attr('transform', 'translate(3, 5)');\n      const defs = svg.append('defs');\n      const linearGradient = defs.append('linearGradient').attr('id', 'myGradient');\n      linearGradient.selectAll('stop')\n        .data(this.colorData)\n        .enter().append('stop')\n        .attr('offset', (d) => d.offset)\n        .attr('stop-color', (d) => d.color);\n      g.append('rect')\n        .attr('width', 180 - (9 * 2))\n        .attr('height', 8)\n        .style('fill', 'url(#myGradient)');\n      g.append('g')\n        .call(xAxis);\n    },\n    clearLayer(methodName) {\n      if (methodName === 'CMAQ_data') {\n        this.polygon_data_1.forEach((layer) => {\n          this.map1.removeLayer(layer);\n        });\n      } else {\n        this.polygon_data_2.forEach((layer) => {\n          this.map2.removeLayer(layer);\n        });\n      }\n    },\n    checkCondition(pol, olPol, hr, nD, oD) {\n      this.changeName(pol, hr);\n      if (oD === nD && olPol === pol) {\n        console.log(true);\n        this.drawGrids(this.geodata, hr);\n      } else {\n        this.getdata(pol, hr, nD);\n      }\n    },\n    getdata(pol, hr, nD) {\n      const path = 'http://127.0.0.1:5000/data';\n      axios.post(path, {\n        pollutants: pol,\n        Date: nD,\n        Future_hour: hr,\n      })\n        .then((res) => {\n          this.drawGrids(res.data, hr);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    doAnimation(j, pol, olPol, nD, oD) {\n      let x = j;\n      setTimeout(() => {\n        if (this.flag === true) {\n          const hour = this.array[x];\n          this.checkCondition(pol, olPol, hour, nD, oD);\n          x -= 1;\n          if (x >= 0) {\n            this.index = x;\n            this.doAnimation(x, pol, olPol, nD, oD);\n          }\n        }\n      }, 1000);\n    },\n    changeName(pol, hr) {\n      const legName = pol;\n      const fhName = 'Future_hour:';\n      document.getElementById('legend_name').innerHTML = legName.concat('  Concentration');\n      document.getElementById('Future_hour').innerHTML = fhName.concat(hr);\n    },\n    submitFunc(pol, olPol, hr, nD, oD) {\n      if (this.index === 0) {\n        this.index = 12;\n      } else {\n        this.index = this.array.indexOf(parseInt(hr, 10));\n      }\n      this.checkCondition(pol, olPol, hr, nD, oD);\n    },\n    playFunc(pol, olPol, nD, oD) {\n      this.flag = true;\n      this.doAnimation(this.index, pol, olPol, nD, oD);\n    },\n    stopFunc() {\n      this.flag = false;\n    },\n  },\n  mounted() {\n    this.initMap();\n    this.drawLegend('#legend');\n    EventBus.$on('clicked-event', (pollutant, oldPollutant, hour, newDate, oldDate) => {\n      if (this.geodata === null) {\n        this.changeName(pollutant, hour);\n        this.getdata(pollutant, hour, newDate);\n      } else {\n        this.submitFunc(pollutant, oldPollutant, hour, newDate, oldDate);\n      }\n    });\n    EventBus.$on('play-event', (pollutant, oldPollutant, newDate, oldDate) => {\n      this.playFunc(pollutant, oldPollutant, newDate, oldDate);\n    });\n    EventBus.$on('stop-event', () => {\n      this.stopFunc();\n    });\n  },\n};\n</script>\n\n<style>\n/* tags */\n/* h4{\n  text-align: left;\n  margin: 10px 0 0 250px;\n  width: 250px;\n} */\n/* class */\n.col-12{\n  height: 50vh;\n}\n.first_map{\n  padding: 0;\n}\n.legend{\n  width: 180px;\n  margin-left: 45px;\n}\n/* ids */\n#heading_1{\n  width: 150px;\n  margin: 25px 0 0 95px;\n}\n#heading_2{\n  width: 250px;\n  margin: 15px 0 0 195px;\n}\n#Future_hour{\n  text-align: left;\n  width: 105px;\n  margin: 20px 0 0 5px;\n}\n#legend_name{\n  text-align: left;\n  margin: 5px 0 0 47px;\n  font-size: 12px;\n  width: 150px;\n}\n#map_1{\n  margin: 10px 0 0 10px;\n  height: 350px;\n  width: 630px;\n}\n#map_2{\n  margin: 50px 0 0 10px;\n  height: 350px;\n  width: 630px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}