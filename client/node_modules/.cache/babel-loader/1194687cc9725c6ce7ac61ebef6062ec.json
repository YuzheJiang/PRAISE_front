{"remainingRequest":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/babel-loader/lib/index.js!/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/src/components/Mapview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/src/components/Mapview.vue","mtime":1609383349962},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/babel-loader/lib/index.js","mtime":1594193189891},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js","mtime":1594193201324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Mapview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row\">\n      <div class=\"col-12\">\n         <div class=\"row\">\n           <div class=\"col-md-3 first_map\">\n            <h6 id=\"Future_hour\">Future hour:</h6>\n          </div>\n          <div class=\"col-md-5 first_map\">\n            <h4 id='heading_1'>CMAQ Result</h4>\n          </div>\n          <div class=\"col-md-4 first_map\">\n            <p id=\"legend_name\"></p>\n            <div class = 'legend' id='legend'></div>\n          </div>\n        </div>\n        <div class='map' id='map_1'></div>\n      </div>\n      <hr>\n      <div class=\"col-12\">\n        <div class=\"row\">\n          <div class=\"col-md-3 second_map\"></div>\n          <div class=\"col-md-5 second_map\">\n            <h4 id='heading_2'>Our_Method Result</h4>\n          </div>\n          <div class=\"col-md-4 second_map\">\n            <p>Error Type</p>\n            <div class = 'legend' id='legend_2'></div>\n          </div>\n        </div>\n        <div class='map' id='map_2'></div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport EventBus from '@/eventBus';\n\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      colorData: [{ offset: '0%', color: '#ffffff' }, { offset: '18.28%', color: '#edf8fb' },\n        { offset: '28.56%', color: '#ccece6' }, { offset: '42.84%', color: '#99d8c9' },\n        { offset: '57.12%', color: '#66c2a4' }, { offset: '71.4%', color: '#2ca25f' },\n        { offset: '100%', color: '#006d2c' }],\n      extent: [0, 80],\n      array: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n      index: 12,\n      obStation: null,\n      map1: null,\n      map2: null,\n      flag: false,\n      polygon_data_1: [],\n      polygon_data_2: [],\n      geodata: null,\n      mapdata: null,\n      obs_data: null,\n    };\n  },\n  methods: {\n    initMap() {\n      this.map1 = L.map('map_1').setView([22.34385, 114.1289], 10);\n      this.map2 = L.map('map_2').setView([22.34385, 114.1289], 10);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map1);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map2);\n    },\n    drawGrids(map) {\n      const path = 'http://127.0.0.1:5000/gridData';\n      axios.get(path)\n        .then((res) => {\n          let polygon;\n          this.geodata = res.data;\n          this.geodata.forEach((layer) => {\n            polygon = L.polygon(layer.coord, {\n              color: 'lightgrey',\n              opacity: 0.0,\n              x: layer.x,\n              y: layer.y,\n            });\n            if (map === 'CMAQ') {\n              polygon.addTo(this.map1);\n              this.polygon_data_1.push(polygon);\n            } else {\n              polygon.addTo(this.map2);\n              this.polygon_data_2.push(polygon);\n            }\n          });\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    obsData(pollutant, newDate) {\n      const path = 'http://127.0.0.1:5000/obsData';\n      axios.post(path, {\n        pollutants: pollutant,\n        Date: newDate,\n      })\n        .then((res) => {\n          this.obs_data = res.data;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    getData(pollutant, hour, newDate) {\n      this.obsData(pollutant, newDate);\n      const path = 'http://127.0.0.1:5000/dummyData';\n      axios.post(path, {\n        pollutants: pollutant,\n        Date: newDate,\n      })\n        .then((res) => {\n          console.log(res.data);\n          this.colorMap(res.data, pollutant, hour);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    colorMap(data, pollutant, hour) {\n      this.clearColor();\n      this.changeName(pollutant, hour);\n      let polygonData = null;\n      const colors = d3.scaleQuantize()\n        .domain(this.extent)\n        .range(this.colorData.map((d) => d.color));\n      const methods = ['CMAQ', 'Our_method'];\n      this.mapdata = data;\n      let newData = null;\n      methods.forEach((el) => {\n        let m = 0;\n        const name = el;\n        if (name === 'CMAQ') {\n          polygonData = this.polygon_data_1;\n          newData = this.mapdata.CMAQ[hour];\n        } else {\n          polygonData = this.polygon_data_2;\n          newData = this.mapdata.Our_method[hour];\n        }\n        for (let i = 0; i < 41; i += 1) {\n          for (let j = 0; j < 64; j += 1) {\n            const index = j + m;\n            const val = newData[i][j].toFixed(2);\n            polygonData[index].setStyle({\n              fillColor: null, color: colors(val), fillOpacity: 0.4,\n            }).bindTooltip(`${name}: ${val.toString()}`);\n          }\n          m += 64;\n        }\n        this.obs_data[hour].forEach((element) => {\n          const value = newData[element.y][element.x].toFixed(2);\n          polygonData.forEach((layer) => {\n            if (element.x === layer.options.x && element.y === layer.options.y) {\n              const error = (value - element.Pollutant.toFixed(2)).toFixed(2);\n              if (element.Pollutant.toFixed(2) > value) {\n                layer.setStyle({\n                  fillColor: 'red', color: 'yellow', fillOpacity: 0.5,\n                }).bindTooltip(`${name}: ${value.toString()} OBS:\n        ${element.Pollutant.toFixed(2).toString()} <br>Error: ${error}`);\n              } else {\n                layer.setStyle({\n                  fillColor: 'red', color: 'blue', fillOpacity: 0.5,\n                }).bindTooltip(`${name}: ${value.toString()} OBS:\n        ${element.Pollutant.toFixed(2).toString()} <br>Error: ${error}`);\n              }\n            }\n          });\n        });\n      });\n    },\n    drawLegend(divID) {\n      const xScale = d3.scaleLinear()\n        .range([0, 180 - (9 * 2)])\n        .domain(this.extent);\n      const xAxis = d3.axisBottom(xScale)\n        .tickSize(8 * 2)\n        .tickValues(this.extent);\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 180)\n        .attr('height', 35);\n      const g = svg.append('g').attr('transform', 'translate(3, 5)');\n      const defs = svg.append('defs');\n      const linearGradient = defs.append('linearGradient').attr('id', 'myGradient');\n      linearGradient.selectAll('stop')\n        .data(this.colorData)\n        .enter().append('stop')\n        .attr('offset', (d) => d.offset)\n        .attr('stop-color', (d) => d.color);\n      g.append('rect')\n        .attr('width', 180 - (9 * 2))\n        .attr('height', 8)\n        .style('fill', 'url(#myGradient)');\n      g.append('g')\n        .call(xAxis);\n    },\n    drawLegend2(divID) {\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 150)\n        .attr('height', 60);\n      const nameData = [{ name: 'OverEst_error', color: 'yellow' },\n        { name: 'UnderEst_error', color: 'blue' }];\n      nameData.forEach((l, i) => {\n        const g = svg.append('g').attr('transform', `translate(4, ${(i * 20) + 5})`);\n        g.append('rect')\n          .attr('width', 10)\n          .attr('height', 10)\n          .style('fill', l.color)\n          .style('opacity', 0.5);\n        g.append('text')\n          .attr('x', 125)\n          .attr('y', 10)\n          .attr('text-anchor', 'end')\n          .style('text-transform', 'capitalize')\n          .text(l.name);\n      });\n    },\n    clearColor() {\n      this.polygon_data_1.forEach((element) => {\n        element.setStyle({ fillColor: null });\n      });\n    },\n    checkCondition(pol, olPol, hr, nD, oD) {\n      this.changeName(pol, hr);\n      if (oD === nD && olPol === pol) {\n        this.colorMap(this.mapdata, pol, hr);\n      } else {\n        this.getData(pol, hr, nD);\n      }\n    },\n    doAnimation(j, pol, olPol, nD, oD) {\n      let x = j;\n      setTimeout(() => {\n        if (this.flag === true) {\n          const hour = this.array[x];\n          this.checkCondition(pol, olPol, hour, nD, oD);\n          x -= 1;\n          if (x >= 0) {\n            this.index = x;\n            this.doAnimation(x, pol, olPol, nD, oD);\n          }\n        }\n      }, 1000);\n    },\n    changeName(pol, hr) {\n      const legName = pol;\n      const fhName = 'Future_hour:';\n      document.getElementById('legend_name').innerHTML = legName.concat('  Concentration');\n      document.getElementById('Future_hour').innerHTML = fhName.concat(hr);\n    },\n    submitFunc(pol, olPol, hr, nD, oD) {\n      if (this.index === 0) {\n        this.index = 12;\n      } else {\n        this.index = this.array.indexOf(parseInt(hr, 10));\n      }\n      this.checkCondition(pol, olPol, hr, nD, oD);\n    },\n    playFunc(pol, olPol, nD, oD) {\n      this.flag = true;\n      this.doAnimation(this.index, pol, olPol, nD, oD);\n    },\n    stopFunc() {\n      this.flag = false;\n    },\n  },\n  mounted() {\n    this.initMap();\n    this.drawLegend('#legend');\n    this.drawLegend2('#legend_2');\n    this.drawGrids('CMAQ');\n    this.drawGrids('Our_Method');\n    EventBus.$on('clicked-event', (pollutant, oldPollutant, hour, newDate, oldDate) => {\n      if (this.mapdata === null) {\n        this.getData(pollutant, hour, newDate);\n      } else {\n        this.submitFunc(pollutant, oldPollutant, hour, newDate, oldDate);\n      }\n    });\n    EventBus.$on('play-event', (pollutant, oldPollutant, newDate, oldDate) => {\n      this.playFunc(pollutant, oldPollutant, newDate, oldDate);\n    });\n    EventBus.$on('stop-event', () => {\n      this.stopFunc();\n    });\n  },\n};\n</script>\n\n<style>\n/* tags */\n/* class */\n.col-12{\n  height: 50vh;\n}\n.first_map,.second_map{\n  padding: 0;\n}\n.legend{\n  width: 180px;\n  height: 30px;\n  margin-left: 45px;\n}\n/* ids */\n#heading_1, #heading_2{\n  width: 250px;\n  margin: 25px 0 0 45px;\n}\n/* #heading_2{\n  width: 250px;\n  margin: 15px 0 0 195px;\n} */\n#Future_hour{\n  text-align: left;\n  width: 105px;\n  margin: 20px 0 0 5px;\n}\n#legend_name{\n  text-align: left;\n  margin: 5px 0 0 47px;\n  font-size: 12px;\n  width: 250px;\n}\n#map_1, #map_2{\n  margin: 10px 0 0 10px;\n  height: 350px;\n  width: 630px;\n}\n/* #map_2{\n  margin: 50px 0 0 10px;\n  height: 350px;\n  width: 630px;\n} */\n</style>\n"],"sourceRoot":"src/components"}]}