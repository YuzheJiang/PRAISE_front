{"remainingRequest":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/accyview.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/accyview.vue","mtime":1596059265075},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/css-loader/dist/cjs.js","mtime":1594193192731},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1594193201325},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/postcss-loader/src/index.js","mtime":1594193198033},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js","mtime":1594193201324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovKiB0YWdzICovCmg0ewogIHRleHQtYWxpZ246IGNlbnRlcjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2lkdGg6IDI1MHB4OwogIG1hcmdpbjogMTBweCA1MHB4IDAgMTI1cHg7Cn0KaHJ7CiAgd2lkdGg6IDEwMHB4Owp9Ci8qIGNsYXNzICovCi5jb2wtMTJ7CiAgICBoZWlnaHQ6IDUwdmg7Cn0KLmxpbmUgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlLXdpZHRoOiAzOwp9Ci5sZWdlbmRfY2xhc3N7CiAgd2lkdGg6IDEzMHB4OwogIGhlaWdodDogNTBweDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbWFyZ2luOiA1cHggMCAwIDM5MHB4Owp9Ci5tZXRyaWNzewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMTAwcHg7CiAgaGVpZ2h0OiAyMHB4OwogIG1hcmdpbjogNDA4cHggMCAwIDA7Cn0KLyogaWRzICovCgo="},{"version":3,"sources":["accyview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"accyview.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"row\">\n      <div class=\"col-12\">\n        <h4>Observatory station</h4>\n        <div class='legend_class' id='legend_obs'></div>\n        <div class='row'>\n          <div class='col-md-12' id='lineChart1'></div>\n        </div>\n        <div class='row'>\n          <div class=\"col-md-6\" id='RMSE_1'></div>\n          <div class=\"col-md-6\" id='IOA_1'></div>\n        </div>\n      </div>\n      <hr>\n      <div class=\"col-12\" id='lineChart2'>\n        <h4>Onsite station</h4>\n        <div class='legend_class' id='legend_on'></div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport EventBus from '@/eventBus';\n\nexport default {\n  name: 'AccView',\n  methods: {\n    getLegend(divID, nameID) {\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 130)\n        .attr('height', 60);\n      const nameData = [{ name: 'CMAQ_data', color: 'lightblue' },\n        { name: nameID, color: 'orange' }];\n      nameData.forEach((l, i) => {\n        const g = svg.append('g').attr('transform', `translate(4, ${(i * 20) + 5})`);\n        g.append('rect')\n          .attr('width', 10)\n          .attr('height', 10)\n          .style('fill', l.color);\n        g.append('text')\n          .attr('x', 110)\n          .attr('y', 10)\n          .attr('text-anchor', 'end')\n          .style('text-transform', 'capitalize')\n          .text(l.name);\n      });\n    },\n    changeValues(response, rmeseID, ioaID) {\n      const rmseName = 'RMSE: '.bold();\n      const ioaName = 'IOA: '.bold();\n      document.getElementById(rmeseID).innerHTML = rmseName.concat(response.data[0].RMSE);\n      document.getElementById(ioaID).innerHTML = ioaName.concat(response.data[0].IOA);\n    },\n    // getMetricsdata(stCode, pol, sD, eD, FHr, rID, ioID) {\n    //   const path = 'http://127.0.0.1:5000/getMetrics';\n    //   axios.post(path, {\n    //     St_code: stCode,\n    //     pollutant: pol,\n    //     st_date: sD,\n    //     en_date: eD,\n    //     F_hour: FHr,\n    //   })\n    //     .then((res) => {\n    //       this.changeValues(res, rID, ioID);\n    //     });\n    // },\n    getLineChart(divID, svgID, response) {\n      d3.select(`#${svgID}`).remove();\n      const margin = {\n        top: 30, right: 10, bottom: 70, left: 25,\n      };\n      const width = 500 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      const svg = d3.select(divID).append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .attr('id', svgID)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      const obsData = response.data[0].line_data.filter(({ data }) => ['Obs_data'].includes(data));\n      const cmaqData = response.data[0].line_data.filter(({ data }) => ['CMAQ_data'].includes(data));\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(obsData, (d) => d3.timeParse('%Y-%m-%d %H:%M:%S')(d.time)))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(cmaqData, (d) => d.pollutant)])\n        .range([height, 0]);\n\n      svg.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0, ${height})`)\n        .call(d3.axisBottom(xScale)\n          .tickFormat(d3.timeFormat('%m-%d %H:%M'))\n          .tickValues(obsData.map((d) => new Date(d.time))))\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', () => 'rotate(-65)');\n      svg.append('g')\n        .attr('class', 'y axis')\n        .call(d3.axisLeft(yScale));\n      const line = d3.line()\n        .x((d) => xScale(new Date(d.time)))\n        .y((d) => yScale(d.pollutant))\n        .curve(d3.curveMonotoneX);\n      svg.append('path')\n        .datum(obsData)\n        .attr('class', 'line')\n        .attr('d', line)\n        .attr('stroke', 'orange');\n      svg.append('path')\n        .datum(cmaqData)\n        .attr('class', 'line')\n        .attr('d', line)\n        .attr('stroke', 'lightblue');\n    },\n    renderChart1(stCode, pol, sD, eD, FHr) {\n      const path = 'http://127.0.0.1:5000/lineChart1';\n      axios.post(path, {\n        St_code: stCode,\n        pollutant: pol,\n        st_date: sD,\n        en_date: eD,\n        F_hour: FHr,\n      })\n        .then((res) => {\n          this.getLineChart('#lineChart1', 'chart1', res);\n          this.changeValues(res, 'RMSE_1', 'IOA_1');\n        });\n      this.getLegend('#legend_obs', 'OBS_data');\n    },\n    renderChart2() {\n      const path = 'http://127.0.0.1:5000/lineChart2';\n      axios.post(path, {\n        Onsite_code: this.Onsite_code,\n      })\n        .then((res) => {\n          this.getLineChart('#lineChart2', 'chart2', res);\n        });\n      this.getLegend('#legend_on', 'Onsite_data');\n    },\n  },\n  mounted() {\n    EventBus.$on('submit-event', (stationCode, pollutant, startDate, endDate, FutHour) => {\n      this.renderChart1(stationCode, pollutant, startDate, endDate, FutHour);\n    });\n  },\n};\n</script>\n\n<style>\n/* tags */\nh4{\n  text-align: center;\n  position: absolute;\n  width: 250px;\n  margin: 10px 50px 0 125px;\n}\nhr{\n  width: 100px;\n}\n/* class */\n.col-12{\n    height: 50vh;\n}\n.line {\n  fill: none;\n  stroke-width: 3;\n}\n.legend_class{\n  width: 130px;\n  height: 50px;\n  position: absolute;\n  margin: 5px 0 0 390px;\n}\n.metrics{\n  position: absolute;\n  width: 100px;\n  height: 20px;\n  margin: 408px 0 0 0;\n}\n/* ids */\n\n</style>\n"]}]}