{"remainingRequest":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/src/components/Mapview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/src/components/Mapview.vue","mtime":1609383349962},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/babel-loader/lib/index.js","mtime":1594193189891},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js","mtime":1594193201324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Mapview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Mapview.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"row\">\n      <div class=\"col-12\">\n         <div class=\"row\">\n           <div class=\"col-md-3 first_map\">\n            <h6 id=\"Future_hour\">Future hour:</h6>\n          </div>\n          <div class=\"col-md-5 first_map\">\n            <h4 id='heading_1'>CMAQ Result</h4>\n          </div>\n          <div class=\"col-md-4 first_map\">\n            <p id=\"legend_name\"></p>\n            <div class = 'legend' id='legend'></div>\n          </div>\n        </div>\n        <div class='map' id='map_1'></div>\n      </div>\n      <hr>\n      <div class=\"col-12\">\n        <div class=\"row\">\n          <div class=\"col-md-3 second_map\"></div>\n          <div class=\"col-md-5 second_map\">\n            <h4 id='heading_2'>Our_Method Result</h4>\n          </div>\n          <div class=\"col-md-4 second_map\">\n            <p>Error Type</p>\n            <div class = 'legend' id='legend_2'></div>\n          </div>\n        </div>\n        <div class='map' id='map_2'></div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport EventBus from '@/eventBus';\n\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      colorData: [{ offset: '0%', color: '#ffffff' }, { offset: '18.28%', color: '#edf8fb' },\n        { offset: '28.56%', color: '#ccece6' }, { offset: '42.84%', color: '#99d8c9' },\n        { offset: '57.12%', color: '#66c2a4' }, { offset: '71.4%', color: '#2ca25f' },\n        { offset: '100%', color: '#006d2c' }],\n      extent: [0, 80],\n      array: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n      index: 12,\n      obStation: null,\n      map1: null,\n      map2: null,\n      flag: false,\n      polygon_data_1: [],\n      polygon_data_2: [],\n      geodata: null,\n      mapdata: null,\n      obs_data: null,\n    };\n  },\n  methods: {\n    initMap() {\n      this.map1 = L.map('map_1').setView([22.34385, 114.1289], 10);\n      this.map2 = L.map('map_2').setView([22.34385, 114.1289], 10);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map1);\n      L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',\n        { attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>' }).addTo(this.map2);\n    },\n    drawGrids(map) {\n      const path = 'http://127.0.0.1:5000/gridData';\n      axios.get(path)\n        .then((res) => {\n          let polygon;\n          this.geodata = res.data;\n          this.geodata.forEach((layer) => {\n            polygon = L.polygon(layer.coord, {\n              color: 'lightgrey',\n              opacity: 0.0,\n              x: layer.x,\n              y: layer.y,\n            });\n            if (map === 'CMAQ') {\n              polygon.addTo(this.map1);\n              this.polygon_data_1.push(polygon);\n            } else {\n              polygon.addTo(this.map2);\n              this.polygon_data_2.push(polygon);\n            }\n          });\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    obsData(pollutant, newDate) {\n      const path = 'http://127.0.0.1:5000/obsData';\n      axios.post(path, {\n        pollutants: pollutant,\n        Date: newDate,\n      })\n        .then((res) => {\n          this.obs_data = res.data;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    getData(pollutant, hour, newDate) {\n      this.obsData(pollutant, newDate);\n      const path = 'http://127.0.0.1:5000/dummyData';\n      axios.post(path, {\n        pollutants: pollutant,\n        Date: newDate,\n      })\n        .then((res) => {\n          console.log(res.data);\n          this.colorMap(res.data, pollutant, hour);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    colorMap(data, pollutant, hour) {\n      this.clearColor();\n      this.changeName(pollutant, hour);\n      let polygonData = null;\n      const colors = d3.scaleQuantize()\n        .domain(this.extent)\n        .range(this.colorData.map((d) => d.color));\n      const methods = ['CMAQ', 'Our_method'];\n      this.mapdata = data;\n      let newData = null;\n      methods.forEach((el) => {\n        let m = 0;\n        const name = el;\n        if (name === 'CMAQ') {\n          polygonData = this.polygon_data_1;\n          newData = this.mapdata.CMAQ[hour];\n        } else {\n          polygonData = this.polygon_data_2;\n          newData = this.mapdata.Our_method[hour];\n        }\n        for (let i = 0; i < 41; i += 1) {\n          for (let j = 0; j < 64; j += 1) {\n            const index = j + m;\n            const val = newData[i][j].toFixed(2);\n            polygonData[index].setStyle({\n              fillColor: null, color: colors(val), fillOpacity: 0.4,\n            }).bindTooltip(`${name}: ${val.toString()}`);\n          }\n          m += 64;\n        }\n        this.obs_data[hour].forEach((element) => {\n          const value = newData[element.y][element.x].toFixed(2);\n          polygonData.forEach((layer) => {\n            if (element.x === layer.options.x && element.y === layer.options.y) {\n              const error = (value - element.Pollutant.toFixed(2)).toFixed(2);\n              if (element.Pollutant.toFixed(2) > value) {\n                layer.setStyle({\n                  fillColor: 'red', color: 'yellow', fillOpacity: 0.5,\n                }).bindTooltip(`${name}: ${value.toString()} OBS:\n        ${element.Pollutant.toFixed(2).toString()} <br>Error: ${error}`);\n              } else {\n                layer.setStyle({\n                  fillColor: 'red', color: 'blue', fillOpacity: 0.5,\n                }).bindTooltip(`${name}: ${value.toString()} OBS:\n        ${element.Pollutant.toFixed(2).toString()} <br>Error: ${error}`);\n              }\n            }\n          });\n        });\n      });\n    },\n    drawLegend(divID) {\n      const xScale = d3.scaleLinear()\n        .range([0, 180 - (9 * 2)])\n        .domain(this.extent);\n      const xAxis = d3.axisBottom(xScale)\n        .tickSize(8 * 2)\n        .tickValues(this.extent);\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 180)\n        .attr('height', 35);\n      const g = svg.append('g').attr('transform', 'translate(3, 5)');\n      const defs = svg.append('defs');\n      const linearGradient = defs.append('linearGradient').attr('id', 'myGradient');\n      linearGradient.selectAll('stop')\n        .data(this.colorData)\n        .enter().append('stop')\n        .attr('offset', (d) => d.offset)\n        .attr('stop-color', (d) => d.color);\n      g.append('rect')\n        .attr('width', 180 - (9 * 2))\n        .attr('height', 8)\n        .style('fill', 'url(#myGradient)');\n      g.append('g')\n        .call(xAxis);\n    },\n    drawLegend2(divID) {\n      const svg = d3.select(divID)\n        .append('svg')\n        .attr('width', 150)\n        .attr('height', 60);\n      const nameData = [{ name: 'OverEst_error', color: 'yellow' },\n        { name: 'UnderEst_error', color: 'blue' }];\n      nameData.forEach((l, i) => {\n        const g = svg.append('g').attr('transform', `translate(4, ${(i * 20) + 5})`);\n        g.append('rect')\n          .attr('width', 10)\n          .attr('height', 10)\n          .style('fill', l.color)\n          .style('opacity', 0.5);\n        g.append('text')\n          .attr('x', 125)\n          .attr('y', 10)\n          .attr('text-anchor', 'end')\n          .style('text-transform', 'capitalize')\n          .text(l.name);\n      });\n    },\n    clearColor() {\n      this.polygon_data_1.forEach((element) => {\n        element.setStyle({ fillColor: null });\n      });\n    },\n    checkCondition(pol, olPol, hr, nD, oD) {\n      this.changeName(pol, hr);\n      if (oD === nD && olPol === pol) {\n        this.colorMap(this.mapdata, pol, hr);\n      } else {\n        this.getData(pol, hr, nD);\n      }\n    },\n    doAnimation(j, pol, olPol, nD, oD) {\n      let x = j;\n      setTimeout(() => {\n        if (this.flag === true) {\n          const hour = this.array[x];\n          this.checkCondition(pol, olPol, hour, nD, oD);\n          x -= 1;\n          if (x >= 0) {\n            this.index = x;\n            this.doAnimation(x, pol, olPol, nD, oD);\n          }\n        }\n      }, 1000);\n    },\n    changeName(pol, hr) {\n      const legName = pol;\n      const fhName = 'Future_hour:';\n      document.getElementById('legend_name').innerHTML = legName.concat('  Concentration');\n      document.getElementById('Future_hour').innerHTML = fhName.concat(hr);\n    },\n    submitFunc(pol, olPol, hr, nD, oD) {\n      if (this.index === 0) {\n        this.index = 12;\n      } else {\n        this.index = this.array.indexOf(parseInt(hr, 10));\n      }\n      this.checkCondition(pol, olPol, hr, nD, oD);\n    },\n    playFunc(pol, olPol, nD, oD) {\n      this.flag = true;\n      this.doAnimation(this.index, pol, olPol, nD, oD);\n    },\n    stopFunc() {\n      this.flag = false;\n    },\n  },\n  mounted() {\n    this.initMap();\n    this.drawLegend('#legend');\n    this.drawLegend2('#legend_2');\n    this.drawGrids('CMAQ');\n    this.drawGrids('Our_Method');\n    EventBus.$on('clicked-event', (pollutant, oldPollutant, hour, newDate, oldDate) => {\n      if (this.mapdata === null) {\n        this.getData(pollutant, hour, newDate);\n      } else {\n        this.submitFunc(pollutant, oldPollutant, hour, newDate, oldDate);\n      }\n    });\n    EventBus.$on('play-event', (pollutant, oldPollutant, newDate, oldDate) => {\n      this.playFunc(pollutant, oldPollutant, newDate, oldDate);\n    });\n    EventBus.$on('stop-event', () => {\n      this.stopFunc();\n    });\n  },\n};\n</script>\n\n<style>\n/* tags */\n/* class */\n.col-12{\n  height: 50vh;\n}\n.first_map,.second_map{\n  padding: 0;\n}\n.legend{\n  width: 180px;\n  height: 30px;\n  margin-left: 45px;\n}\n/* ids */\n#heading_1, #heading_2{\n  width: 250px;\n  margin: 25px 0 0 45px;\n}\n/* #heading_2{\n  width: 250px;\n  margin: 15px 0 0 195px;\n} */\n#Future_hour{\n  text-align: left;\n  width: 105px;\n  margin: 20px 0 0 5px;\n}\n#legend_name{\n  text-align: left;\n  margin: 5px 0 0 47px;\n  font-size: 12px;\n  width: 250px;\n}\n#map_1, #map_2{\n  margin: 10px 0 0 10px;\n  height: 350px;\n  width: 630px;\n}\n/* #map_2{\n  margin: 50px 0 0 10px;\n  height: 350px;\n  width: 630px;\n} */\n</style>\n"]}]}