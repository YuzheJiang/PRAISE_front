{"remainingRequest":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/pickers.vue?vue&type=template&id=1bdf8d76&","dependencies":[{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/src/components/pickers.vue","mtime":1595485560304},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1594193201325},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/cache-loader/dist/cjs.js","mtime":1594193191162},{"path":"/Users/reshika/cs20/Research_Assistant/HSBC/New_layout/PRAISE_front/client/node_modules/vue-loader/lib/index.js","mtime":1594193201324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}